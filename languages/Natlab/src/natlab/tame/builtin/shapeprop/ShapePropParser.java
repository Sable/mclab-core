package natlab.tame.builtin.shapeprop;

import natlab.tame.builtin.shapeprop.mathmode.SPMathMode;
import java.util.ArrayList;
import java.util.*;
import beaver.*;
import natlab.tame.builtin.shapeprop.ast.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.2
 * from the grammar specification "shapeprop.grammar".
 */
public class ShapePropParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short LOWERCASE = 1;
		static public final short UPPERCASE = 2;
		static public final short ANY = 3;
		static public final short LSPAREN = 4;
		static public final short SCALAR = 5;
		static public final short BLANK = 6;
		static public final short ID = 7;
		static public final short LRPAREN = 8;
		static public final short SQUOTATION = 9;
		static public final short NUMBER = 10;
		static public final short MATHEXPR = 11;
		static public final short RRPAREN = 12;
		static public final short EQUAL = 13;
		static public final short COMMA = 14;
		static public final short RSPAREN = 15;
		static public final short OROR = 16;
		static public final short ARROW = 17;
		static public final short OR = 18;
		static public final short QUESTION = 19;
		static public final short MULT = 20;
		static public final short PLUS = 21;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9oLb4bF544Kn$zjWyF03BB8J0$Bm0mYk84Rk8kuuiKj#WcycdZofeb7Gw87uq6ZngY9yUQ" +
		"dy0Eux$i6k2#ueiz$LTVC54qFX4v#zLxztwlNrLqBW6jOXIfqYs0EfgCLNPYDTdHerSKqpC" +
		"DQoUNS3#H4i88vfNuKonXj2rJebhzK5rZgQgn17veHHpLgC1yz8KeJAZ73AENo3xLeH1epn" +
		"#W9UEZKUWcoM8YMALUkmIpsLGLRPLyUQBMWBTTZxP6sty3lN8bwRNjfrs6zt4CITTY0ZRGf" +
		"5P6xZ2nXnb8iHfGsnaZ6U7En2Pkn1Oiu4w0CkQU2g9aacElHL#zeP4wQxsxHQYk$ePuZsar" +
		"EF91J3KVd#D58I8NnTHskkik$MigrZh1sT1AbKi#vdBEDZT5ZZCIqNiM$5ITJhHnX1KTNi5" +
		"NLZ#kse4NrM7kaxQllZ78T4derKfnL6Ijak6#KhwoAn4s6bxUvYCTLhkN#g#CUTdXIsiGyo" +
		"jCp0VeF#slMGrooW$IIBX8ZnqsyZvnKVZ7uRBNgRJTscmfFC6QtiRkCtK$sXkHT8GF6tqTs" +
		"6dyFEL2ajjgLHun$oj8Fmj#jXyWPSfQS9rV91N8fM8k$RDZoHwrQ5ot$Sh7lj786GhHZ4#I" +
		"V3j4gmd8vhn4JJmJopqqshoBlFXhedoYIru$08wFoX#rl#IN3CYI3yaPUQ$qckI4ls3wNP$" +
		"9KdiXZUSJUA$9IVhBz8TzbHBx9H$fVzPWFkdqeT#Ist9BhklUUl9EtR8VC6mUD$IAVvHETJ" +
		"juj3cyGXSkxnEKTxn3VDcXStXvEdZJxQPw$0Wvl6DV2uQaQJvAvISQpzBEq6Lf5ogAPUXEj" +
		"Juc6PpAFnxX7JTrY7Vy1NuRZRm==");

	private final Action[] actions;

	public ShapePropParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = caselist
			new Action() {	// [1] caselist = case.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final SPCase c = (SPCase) _symbol_c.value;
					 return new SPCaselist(c, null);
				}
			},
			new Action() {	// [2] caselist = case.c OROR caselist.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final SPCase c = (SPCase) _symbol_c.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final SPCaselist l = (SPCaselist) _symbol_l.value;
					 return new SPCaselist(c, l);
				}
			},
			new Action() {	// [3] case = patternlist.p ARROW outputlist.o
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 1];
					final SPPatternlist p = (SPPatternlist) _symbol_p.value;
					final Symbol _symbol_o = _symbols[offset + 3];
					final SPOutputlist o = (SPOutputlist) _symbol_o.value;
					 return new SPCase(p, o);
				}
			},
			new Action() {	// [4] outputlist = vectorExpr.v
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final SPAbstractVectorExpr v = (SPAbstractVectorExpr) _symbol_v.value;
					 return new SPOutputlist(v, null);
				}
			},
			new Action() {	// [5] outputlist = vectorExpr.v COMMA outputlist.o
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final SPAbstractVectorExpr v = (SPAbstractVectorExpr) _symbol_v.value;
					final Symbol _symbol_o = _symbols[offset + 3];
					final SPOutputlist o = (SPOutputlist) _symbol_o.value;
					 return new SPOutputlist(v, o);
				}
			},
			new Action() {	// [6] outputlist = funCall.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final SPFunCall c = (SPFunCall) _symbol_c.value;
					 return new SPOutputlist(new SPOutputFunCall(c),null);
				}
			},
			new Action() {	// [7] patternlist = pattern.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final SPAbstractPattern e = (SPAbstractPattern) _symbol_e.value;
					 return new SPPatternlist(e, null);
				}
			},
			new Action() {	// [8] patternlist = pattern.e COMMA patternlist.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final SPAbstractPattern e = (SPAbstractPattern) _symbol_e.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final SPPatternlist p = (SPPatternlist) _symbol_p.value;
					 return new SPPatternlist(e, p);
				}
			},
			new Action() {	// [9] pattern = matchExpr.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_m = _symbols[offset + 1];
					final SPAbstractMatchExpr m = (SPAbstractMatchExpr) _symbol_m.value;
					 return m;
				}
			},
			new Action() {	// [10] pattern = assignStmt.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final SPAssignStmt a = (SPAssignStmt) _symbol_a.value;
					 return a;
				}
			},
			new Action() {	// [11] pattern = assertStmt.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final SPAbstractPattern a = (SPAbstractPattern) _symbol_a.value;
					 return a;
				}
			},
			new Action() {	// [12] matchExpr = basicMatchExpr.m OR basicMatchExpr.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_m = _symbols[offset + 1];
					final SPAbstractMatchExpr m = (SPAbstractMatchExpr) _symbol_m.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final SPAbstractMatchExpr n = (SPAbstractMatchExpr) _symbol_n.value;
					 return new SPOr(m,n);
				}
			},
			new Action() {	// [13] matchExpr = basicMatchExpr.m QUESTION
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_m = _symbols[offset + 1];
					final SPAbstractMatchExpr m = (SPAbstractMatchExpr) _symbol_m.value;
					 return new SPQuestion(m);
				}
			},
			new Action() {	// [14] matchExpr = basicMatchExpr.m MULT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_m = _symbols[offset + 1];
					final SPAbstractMatchExpr m = (SPAbstractMatchExpr) _symbol_m.value;
					 return new SPMult(m);
				}
			},
			new Action() {	// [15] matchExpr = basicMatchExpr.m PLUS
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_m = _symbols[offset + 1];
					final SPAbstractMatchExpr m = (SPAbstractMatchExpr) _symbol_m.value;
					 return new SPPlus(m);
				}
			},
			new Action() {	// [16] matchExpr = basicMatchExpr.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_m = _symbols[offset + 1];
					final SPAbstractMatchExpr m = (SPAbstractMatchExpr) _symbol_m.value;
					 return m;
				}
			},
			new Action() {	// [17] basicMatchExpr = LRPAREN patternlist.p RRPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 2];
					final SPPatternlist p = (SPPatternlist) _symbol_p.value;
					 return new SPRParen(p);
				}
			},
			new Action() {	// [18] basicMatchExpr = SQUOTATION ID.i SQUOTATION
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					 return new SPStringLiteral(i);
				}
			},
			new Action() {	// [19] basicMatchExpr = SQUOTATION LOWERCASE.i SQUOTATION
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					 return new SPStringLiteral(i);
				}
			},
			new Action() {	// [20] basicMatchExpr = vectorExpr.v
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final SPAbstractVectorExpr v = (SPAbstractVectorExpr) _symbol_v.value;
					 return v;
				}
			},
			new Action() {	// [21] vectorExpr = SCALAR.d
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_d = _symbols[offset + 1];
					final String d = (String) _symbol_d.value;
					 return new SPScalar(d);
				}
			},
			new Action() {	// [22] vectorExpr = UPPERCASE.u
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_u = _symbols[offset + 1];
					final String u = (String) _symbol_u.value;
					 return new SPUppercase(u);
				}
			},
			new Action() {	// [23] vectorExpr = ANY.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					 return new SPAny(a);
				}
			},
			new Action() {	// [24] vectorExpr = vertcatExpr.v
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final SPVertcatExpr v = (SPVertcatExpr) _symbol_v.value;
					 return v;
				}
			},
			new Action() {	// [25] vectorExpr = BLANK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new SPBlank();
				}
			},
			new Action() {	// [26] vertcatExpr = LSPAREN RSPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new SPVertcatExpr();
				}
			},
			new Action() {	// [27] vertcatExpr = LSPAREN arglist.al RSPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_al = _symbols[offset + 2];
					final SPArglist al = (SPArglist) _symbol_al.value;
					 return new SPVertcatExpr(al);
				}
			},
			new Action() {	// [28] arglist = arg.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final SPAbstractMatchElement a = (SPAbstractMatchElement) _symbol_a.value;
					 return new SPArglist(a, null);
				}
			},
			new Action() {	// [29] arglist = arg.a COMMA arglist.al
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final SPAbstractMatchElement a = (SPAbstractMatchElement) _symbol_a.value;
					final Symbol _symbol_al = _symbols[offset + 3];
					final SPArglist al = (SPArglist) _symbol_al.value;
					 return new SPArglist(a, al);
				}
			},
			new Action() {	// [30] arg = scalarExpr.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final SPAbstractScalarExpr s = (SPAbstractScalarExpr) _symbol_s.value;
					 return s;
				}
			},
			new Action() {	// [31] arg = vectorExpr.v
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final SPAbstractVectorExpr v = (SPAbstractVectorExpr) _symbol_v.value;
					 return v;
				}
			},
			new Action() {	// [32] scalarExpr = NUMBER.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Number n = (Number) _symbol_n.value;
					 return new SPNumber(n);
				}
			},
			new Action() {	// [33] scalarExpr = LOWERCASE.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					 return new SPLowercase(l);
				}
			},
			new Action() {	// [34] scalarExpr = MATHEXPR.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final String e = (String) _symbol_e.value;
					 return new SPMathMode(e);
				}
			},
			new Action() {	// [35] assignStmt = assignmentLHS.l EQUAL assignmentRHS.r
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final SPAbstractMatchElement l = (SPAbstractMatchElement) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final SPAbstractMatchElement r = (SPAbstractMatchElement) _symbol_r.value;
					 return new SPAssignStmt(l, r);
				}
			},
			new Action() {	// [36] assignmentLHS = LOWERCASE.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					 return new SPLowercase(l);
				}
			},
			new Action() {	// [37] assignmentLHS = UPPERCASE.u
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_u = _symbols[offset + 1];
					final String u = (String) _symbol_u.value;
					 return new SPUppercase(u);
				}
			},
			new Action() {	// [38] assignmentLHS = UPPERCASE.u LRPAREN scalarExpr.s RRPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_u = _symbols[offset + 1];
					final String u = (String) _symbol_u.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final SPAbstractScalarExpr s = (SPAbstractScalarExpr) _symbol_s.value;
					 return new SPUpperIndex(u, s);
				}
			},
			new Action() {	// [39] assignmentLHS = ANY.a LRPAREN scalarExpr.s RRPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final SPAbstractScalarExpr s = (SPAbstractScalarExpr) _symbol_s.value;
					 return new SPUpperIndex(a, s);
				}
			},
			new Action() {	// [40] assignmentRHS = scalarExpr.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final SPAbstractScalarExpr s = (SPAbstractScalarExpr) _symbol_s.value;
					 return s;
				}
			},
			new Action() {	// [41] assignmentRHS = vectorExpr.v
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final SPAbstractVectorExpr v = (SPAbstractVectorExpr) _symbol_v.value;
					 return v;
				}
			},
			new Action() {	// [42] assignmentRHS = funCall.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_f = _symbols[offset + 1];
					final SPFunCall f = (SPFunCall) _symbol_f.value;
					 return f;
				}
			},
			new Action() {	// [43] funCall = ID.i LRPAREN RRPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					 return new SPFunCall(i, null);
				}
			},
			new Action() {	// [44] funCall = ID.i LRPAREN arglist.al RRPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_al = _symbols[offset + 3];
					final SPArglist al = (SPArglist) _symbol_al.value;
					 return new SPFunCall(i, al);
				}
			},
			new Action() {	// [45] assertStmt = funCall.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_f = _symbols[offset + 1];
					final SPFunCall f = (SPFunCall) _symbol_f.value;
					 return f;
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
