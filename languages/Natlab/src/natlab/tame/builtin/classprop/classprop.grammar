%package "natlab.tame.builtin.classprop";
%import "natlab.tame.builtin.classprop.ast.*";
%import "java.util.*";
%class "ClassPropParser";


%terminals NUMBER, LPAREN, RPAREN, OROR, OR, COMMA, MULT, QUESTION, ARROW, ID;
%terminals COERCE, TYPESTRING;

%left  CALL;
%left  RPAREN;
%left  MULT, QUESTION;
%left  OR;
%left  CHAIN;
%left  ARROW;
%left  COMMA;
%left  OROR;


%typeof NUMBER = "Number";
%typeof ID = "String";
%typeof clause, expr, cases = "CP";
%typeof list = "CPList";

%goal cases;

cases
    = list.l                            {: return l.asUnion(); :}
    ;
    
expr 
	= clause.a ARROW clause.b           {: return new CPMap   (a, b); :}
	| expr.a   OROR  expr.b             {: return new CPUnion (a, b); :}
	| clause
	;

clause
	= clause.a QUESTION                 {: return Functions.get("?",new CPList(a,null)); :}
	| clause.a MULT                     {: return Functions.get("*",new CPList(a,null)); :}	
	| clause.a clause.b @ CHAIN         {: return new CPChain(a,b);   :}
	| clause.a OR clause.b              {: return new CPUnion (a, b); :}
    | NUMBER.n                          {: return new CPNum(n.intValue()); :}
	| ID.s                              {: return Functions.get(s);   :}
	| LPAREN expr.e RPAREN              {: return e;                  :}
	| COERCE LPAREN expr.a COMMA expr.b RPAREN  @CALL {: return new CPCoerce(a,b); :}
	| TYPESTRING LPAREN expr.a RPAREN  @CALL          {: return new CPTypeString(a); :}
	;

list
    = expr.e                           {: return new CPList(e,null); :}
    | expr.a COMMA list.l              {: return new CPList(a,l);    :}
    ;






