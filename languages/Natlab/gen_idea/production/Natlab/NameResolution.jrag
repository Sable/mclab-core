// =========================================================================== //
//                                                                             //
// Copyright 2008-2011 Andrew Casey, Jun Li, Jesse Doherty,                    //
//   Maxime Chevalier-Boisvert, Toheed Aslam, Anton Dubrau, Nurudeen Lameed,   //
//   Amina Aslam, Rahul Garg, Soroush Radpour, Olivier Savary Belanger,        //
//   Laurie Hendren, Clark Verbrugge and McGill University.                    //
//                                                                             //
//   Licensed under the Apache License, Version 2.0 (the "License");           //
//   you may not use this file except in compliance with the License.          //
//   You may obtain a copy of the License at                                   //
//                                                                             //
//       http://www.apache.org/licenses/LICENSE-2.0                            //
//                                                                             //
//   Unless required by applicable law or agreed to in writing, software       //
//   distributed under the License is distributed on an "AS IS" BASIS,         //
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  //
//   See the License for the specific language governing permissions and       //
//   limitations under the License.                                            //
//                                                                             //
// =========================================================================== //

import java.util.Map;

import com.google.common.collect.Maps;

aspect NameResolution{
    protected static Map<String, Function> ASTNode.indexFunctionsByName(List<Function> functions) {
      return Maps.uniqueIndex(functions, new com.google.common.base.Function<Function, String>() {
        @Override public String apply(Function node) {
          return node.getName().getID();
        }
      });
    }

    //function lookup implementation
    syn Function FunctionList.getMainFunction() = getFunction(0);

    syn lazy Map<String,Function> FunctionList.getSiblings() = new HashMap<String,Function>();
    syn lazy Map<String,Function> FunctionList.getNested() {
      return indexFunctionsByName(getFunctions());
    }
    syn LocalFunctionLookupInterface FunctionList.getParentFunction() = null;

    syn lazy Map<String,Function> Function.getNested() {
      return indexFunctionsByName(getNestedFunctions());
    }
    inh Map<String, Function> Function.getSiblings();
    eq FunctionList.getFunction(int i).getSiblings() = getNested();
    eq Function.getNestedFunction(int i).getSiblings() = getNested();
    eq ClassDef.getMethod(int i).getSiblings() = new HashMap<String,Function>();

    inh LocalFunctionLookupInterface Function.getParentFunction(); //TODO - fix this, it errors on functions without parents
    eq FunctionList.getFunction(int i).getParentFunction() = this;
    eq Function.getNestedFunction(int i).getParentFunction() = this;
    eq ClassDef.getMethod(int i).getParentFunction() = null; //TODO-JD: fix this

    syn Function Function.lookupFunction( String name )
    {
        Function f = getNested().get(name);
        if( f != null )
            return f;
        if (getParent() == null || getParentFunction() == null) return null;
        return getParentFunction().lookupFunction( name );
    }
    syn Function FunctionList.lookupFunction( String name )
    {
        return getNested().get(name);
    }
}
